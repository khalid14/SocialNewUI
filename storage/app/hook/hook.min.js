/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./storage/app/hook/hook.js":
/***/ (function(module, exports) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (typeof GDPRConsent !== 'function') {
    var _GDPRConsent = function () {
        function _GDPRConsent() {
            _classCallCheck(this, _GDPRConsent);

            this.config = {
                'baseURL': null,
                'shop': null,
                'demo': false,
                'canFindUser': true,
                'blockedNodes': {},
                'pixelAllowed': false,
                'history': [],
                'hooksInjected': false,
                'blockables': ['connect.facebook.net', 'www.google-analytics.com/analytics.js', 'www.googletagmanager.com/gtag/js', 'static.hotjar.com/c/hotjar', 'extreme-dm.com']
            };
            this.cookieConsent = null;
        }

        _createClass(_GDPRConsent, [{
            key: 'inspectConsent',
            value: function inspectConsent() {
                var self = this;

                // ----- hook for demo mode, if set, just show message, and return
                if (self.config.demo) {
                    self.askConsent();return true;
                }

                // ----- only consider server consent if userId is not null
                var serverConsent = self.user.userId != null && self.config.serverConsent == true ? true : null;

                // ----- if feature not enable or consent accepted, no action
                if (self.config.masterSwitch == false || serverConsent == true) {
                    self.allowPixels();
                } else {
                    self.askConsent();
                }
            }
        }, {
            key: 'askConsent',
            value: function askConsent() {
                var self = this;
                var isMobile = false;

                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    isMobile = true;
                }
                var display = isMobile ? 'block' : 'table-cell';
                var pos = self.config.position + ': 0px;';
                var width = !isMobile ? self.config.comply == 'browse' ? 'width: 3%;' : 'width: 180px;' : '';

                var templateWrap = document.createElement('div');
                templateWrap.setAttribute('class', 'gdpr-wrapper');
                templateWrap.setAttribute('style', 'background: none ' + self.config.candy.bg.hex + ';' + pos);
                templateWrap.innerHTML = '<div class="gdpr-container" style="width: 90%;margin: 0px auto; display: table;">' + '<div class="gdpr-badge" style="width: 60px; display: table-cell; vertical-align: middle;">' + '<img src="' + self.config.baseURL + '/images/gdpr.png" style="height: 45px; vertical-align: middle; padding-right: 20px;"/></div>' + '<div class="gdpr-definition" style="display: ' + display + '; color: #fff; font-size: 1.1em; padding: 5px 0px 10px; text-align: justify">' + self.getDefinition() + '</div>' + '<div class="gdpr-actions" style="display: ' + display + '; vertical-align: middle; text-align: right;' + width + '">' + (self.config.comply != 'browse' ? '<button class="btn btn-success gdpr-accept" style="background: none ' + self.config.candy.button.hex + '">Accept</button>' : '') + '<img class="gdpr-close" src="' + self.config.baseURL + '/images/close.png" style="filter: brightness(500%); vertical-align: middle; cursor: pointer;"/></div>' + '</div>';

                document.querySelector('body').appendChild(templateWrap);

                if (this.config.blockingMode) {
                    var veil = document.createElement('div');
                    veil.setAttribute('class', 'gdpr-veil');
                    document.querySelector('body').appendChild(veil);
                    var _closeBtn = document.querySelector('.gdpr-close');
                    _closeBtn.parentNode.removeChild(_closeBtn);
                }

                var btnAccept = document.querySelector('.gdpr-accept');
                if (btnAccept != undefined) {
                    document.querySelector('.gdpr-accept').addEventListener('click', function () {
                        self.syncConsent('accept');
                        self.allowPixels();

                        var target = document.querySelector('.gdpr-wrapper');
                        target.parentNode.removeChild(target);

                        if (self.config.blockingMode) {
                            var veilElem = document.querySelector('.gdpr-veil');
                            veilElem.parentNode.removeChild(veilElem);
                        }
                    });
                }

                var closeBtn = document.querySelector('.gdpr-close');
                if (closeBtn != undefined) {
                    document.querySelector('.gdpr-close').addEventListener('click', function () {
                        self.syncConsent('decline');
                        self.blockPixels();

                        var target = document.querySelector('.gdpr-wrapper');
                        target.parentNode.removeChild(target);

                        if (self.config.blockingMode) {
                            var veilElem = document.querySelector('.gdpr-veil');
                            veilElem.parentNode.removeChild(veilElem);
                        }
                    });
                }
            }
        }, {
            key: 'syncConsent',
            value: function syncConsent(decision) {
                if (this.config.demo == true) return true;
                this.setConsentCookie(decision);

                /*let i = new Image();
                let url = this.config.baseURL + 'consent/set/' + decision + '/' + this.config.shop + '/' + this.user.userId + '/' + this.user.token + '/' + new Date().getTime();
                i.src = url;*/
            }
        }, {
            key: 'identifyMode',
            value: function identifyMode() {
                var mode = this.getUrlParameter('mode');
                if (mode == 'demo') this.config.demo = true;
            }
        }, {
            key: 'getUrlParameter',
            value: function getUrlParameter(name) {
                name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
                var results = regex.exec(location.search);
                return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
            }
        }, {
            key: 'identifyUser',
            value: function identifyUser() {
                var token = null;
                var self = this;

                // ----- if user is logged in, or accounts are disabled by admin
                if (window.ShopifyAnalytics != undefined && window.ShopifyAnalytics.hasOwnProperty('lib') && window.ShopifyAnalytics.lib.hasOwnProperty('user')) {
                    var user = window.ShopifyAnalytics.lib.user().traits();
                    token = user.uniqToken;
                } else {
                    // ----- check from cookies
                    var value = "; " + document.cookie;
                    var parts = value.split("; " + '_y' + "=");
                    if (parts.length >= 2) token = parts.pop().split(";").shift();
                }

                self.user = {
                    'userId': ShopifyAnalytics.meta.page.customerId == undefined ? null : ShopifyAnalytics.meta.page.customerId,
                    'token': token
                };
            }
        }, {
            key: 'getConsentCookie',
            value: function getConsentCookie() {
                var cookie = this.readCookie('GDPRBuster');
                this.cookieConsent = this.config.demo == true ? null : cookie;
            }
        }, {
            key: 'setConsentCookie',
            value: function setConsentCookie(decision) {
                var expireDate = new Date();
                expireDate.setMonth(expireDate.getMonth() + 12);

                var consentCookie = {
                    'decision': decision,
                    'shop': this.config.shop,
                    'userId': this.user.userId,
                    'token': this.user.token
                };

                var user = this.user.userId == null ? '' : this.user.userId;
                document.cookie = 'GDPRBuster' + user + '=' + encodeURIComponent(JSON.stringify(consentCookie)) + '; expires=' + expireDate.toGMTString() + '; path=/';
            }
        }, {
            key: 'allowPixels',
            value: function allowPixels() {
                this.config.pixelAllowed = true;
                this.releasePixels();
            }
        }, {
            key: 'blockPixels',
            value: function blockPixels() {
                this.config.pixelAllowed = false;
            }
        }, {
            key: 'releasePixels',
            value: function releasePixels() {
                var self = this;
                if (self.config.hooksInjected == false) {
                    return true;
                }

                for (var source in self.config.blockedNodes) {
                    var nodeRef = self.config.blockedNodes[source];
                    if (nodeRef.type && source) {
                        var newNode = document.createElement(nodeRef.type);
                        newNode.src = source;
                        if (nodeRef.id) {
                            newNode.id = nodeRef.id;
                        }
                        document.body.appendChild(newNode);
                        self.config.history.push(nodeRef);
                    }
                }
                self.config.blockedNodes = {};
            }
        }, {
            key: 'loadPreReqs',
            value: function loadPreReqs(callback) {
                var self = this;

                // ----- load prerequisites
                var failsafe = 3000; //ms
                var counter = 0;
                var preReqs = setInterval(function () {

                    if (window.ShopifyAnalytics) {
                        clearInterval(preReqs);
                        callback();
                    } else if (counter >= failsafe) {
                        clearInterval(preReqs);
                        self.config.canFindUser = false;
                        self.allowPixels();
                    }
                    counter = counter + 50;
                }, 50);
            }
        }, {
            key: 'checkRegion',
            value: function checkRegion() {
                var self = this;
                var writeCookie = false;
                self.euCountries = ['BE', 'BG', 'CZ', 'DK', 'DE', 'EE', 'IE', 'EL', 'ES', 'FR', 'HR', 'IT', 'CY', 'LV', 'LT', 'LU', 'HU', 'MT', 'NL', 'AT', 'PL', 'PT', 'RO', 'SI', 'SK', 'FI', 'SE', 'GB'];

                var locationData = self.readCookie('GDPRLocation');
                if (locationData) {
                    inspectLocation(locationData);
                } else {
                    writeCookie = true;
                    self.jax('https://ipapi.co/json/', inspectLocation);
                }

                function inspectLocation(data) {
                    self.traceData = data;
                    if (writeCookie) {
                        var expires = new Date();
                        expires.setTime(expires.getTime() + 12 * 60 * 60 * 1000); // 12 hours
                        document.cookie = 'GDPRLocation=' + encodeURIComponent(JSON.stringify(self.traceData)) + '; expires=' + expires + '; path=/';
                    }

                    var isOriginEu = self.euCountries.indexOf(self.traceData.country) != -1;
                    // ----- mode is EU only, but user is not EU
                    if (self.config.audience == 'eu' && !isOriginEu && !self.config.demo) {
                        self.allowPixels();
                    } else {
                        // ----- hook our teeth
                        if (self.config.comply == 'button') {
                            self.injectHooks();
                        }
                        self.inspectConsent();
                    }
                }
            }
        }, {
            key: 'jax',
            value: function jax(url, callback) {
                var self = this;
                var jax = new XMLHttpRequest();
                jax.responseType = 'json';
                jax.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        callback.call(self, this.response);
                    }
                };
                jax.open("GET", url, true);
                jax.send();
            }
        }, {
            key: 'injectHooks',
            value: function injectHooks() {
                // ----- hooks to manage facebook pixels
                var self = this;
                self.gdprInsertBefore = Element.prototype.insertBefore;
                self.gdprAppendChild = Element.prototype.appendChild;

                self.shouldBlock('qeweqw');

                Element.prototype.insertBefore = function () {
                    try {
                        if (self.shouldBlock(arguments)) {
                            self.config.blockedNodes[arguments[0].src] = { type: arguments[0].nodeName, id: arguments[0].id, src: arguments[0].src };
                            return;
                        } else {
                            return self.gdprInsertBefore.apply(this, arguments);
                        }
                    } catch (error) {
                        //console.warn(error);
                    }
                };
                Element.prototype.appendChild = function () {
                    try {
                        if (self.shouldBlock(arguments)) {
                            self.config.blockedNodes[arguments[0].src] = { type: arguments[0].nodeName, id: arguments[0].id, src: arguments[0].src };
                            return;
                        } else {
                            return self.gdprAppendChild.apply(this, arguments);
                        }
                    } catch (error) {
                        //console.warn(error);
                    }
                };
                self.config.hooksInjected = true;
            }
        }, {
            key: 'shouldBlock',
            value: function shouldBlock(args) {
                var self = this;
                var blocked = false;

                for (var i = 0; i < self.config.blockables; i++) {
                    var blockPath = self.config.blockables[i];

                    if (args[0].src && args[0].src.indexOf(blockPath) > -1 && self.config.pixelAllowed == false) {
                        blocked = true;
                        break;
                    }
                }

                return blocked;
            }
        }, {
            key: 'removeHooks',
            value: function removeHooks() {
                Element.prototype.insertBefore = this.gdprInsertBefore;
                Element.prototype.appendChild = this.gdprAppendChild;
            }
        }, {
            key: 'getDefinition',
            value: function getDefinition() {
                var self = this;
                var browserLang = window.navigator.userLanguage || window.navigator.language;
                var langCode = browserLang.split('-')[0];
                var defaultDefinition = '';
                var langDefinition = '';

                self.config.definitions.forEach(function (def, indx) {
                    if (def.lang == 'en') {
                        defaultDefinition = def.definition;
                    }
                    if (def.lang == langCode) {
                        var _langDefinition = def.definition;
                        return true;
                    }
                });

                return langDefinition != '' ? langDefinition : defaultDefinition;
            }
        }, {
            key: 'cookieGotAccepted',
            value: function cookieGotAccepted() {
                var self = this;
                return self.cookieConsent != null && self.cookieConsent.decision == 'accept' && self.cookieConsent.shop == self.config.shop && self.config.demo == false;
            }
        }, {
            key: 'cookieGotDeclined',
            value: function cookieGotDeclined() {
                var self = this;
                return self.cookieConsent != null && self.cookieConsent.decision == 'decline' && self.cookieConsent.shop == self.config.shop && self.config.demo == false;
            }

            /**
             * boot sequence of GDPR
             */

        }, {
            key: 'boot',
            value: function boot() {
                if (window.gdprBooted != undefined) {
                    return true;
                }

                window.gdprBooted = true;
                var self = this;

                // ----- load user settings
                Object.assign(self.config, gdpr_buster);

                // ----- identify mode
                self.identifyMode();

                // ----- proceed if demo or enabled
                if (self.config.demo || self.config.masterSwitch) {
                    self.loadPreReqs(function () {
                        self.identifyUser();
                        self.getConsentCookie();

                        // ----- agility check, if consent approved, abort
                        if (self.cookieGotAccepted() || self.config.comply == 'browse' && self.cookieGotDeclined()) {
                            self.allowPixels();
                            return true;
                        }
                        // ----- normal flow, check region
                        self.checkRegion();
                    });
                }
            }
        }, {
            key: 'readCookie',
            value: function readCookie(key) {
                var cookie = null;
                var user = this.user.userId == null ? '' : this.user.userId;
                var match = document.cookie.match(RegExp('(?:^|;\\s*)' + key + user + '=([^;]*)'));

                match = match ? match[1] : null;

                if (match != null) {
                    try {
                        cookie = JSON.parse(decodeURIComponent(match));
                    } catch (e) {}
                }

                return cookie;
            }
        }]);

        return _GDPRConsent;
    }();

    /**
     * fire it UP !!!!!!
     * @type {GDPRConsent}
     */


    var con = new _GDPRConsent();
    con.boot();
}

/***/ }),

/***/ 1:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./storage/app/hook/hook.js");


/***/ })

/******/ });